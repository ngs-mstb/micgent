#!/usr/bin/env cwl-runner

cwlVersion: v1.0

hints:
  SoftwareRequirement:
    packages:
    - package: 'ngs-mstb'
      version:
      - '1.0'

class: CommandLineTool
requirements:
  - class: InlineJavascriptRequirement
    expressionLib:
      $import: micgent_js_lib.yaml
  - class: ShellCommandRequirement
  ##- class: EnvVarRequirement
  ##  envDef:
      ## make sure that any OMP variables do not affect Spades, and let Spades
      ## manage threads according to its -t parameter:
      ## https://github.com/ablab/spades/issues/112
      ## TODO: can these still appear after Conda env is activated?
      ## There seems to be no syntax to unset the vars in CWL. omp lib complains
      ## if empty strings are assigned
      ##OMP_NUM_THREADS: ""
      ##OMP_THREAD_LIMIT: ""

baseCommand: ['ariba', 'run']
doc: |
  Run the local assembly pipeline

arguments: ["--noclean", "--tmp_dir",$(runtime.tmpdir)]

inputs:

  prepareref_tgz:
    type: File

    doc: TGZ archive of the content of output directory created by "ariba prepareref"
    inputBinding:
      valueFrom: '`python -m MICGENT.util tar-to-dir $(self.path) ref`'
      shellQuote: false
      position: 1

  reads_1:
    type: File

    doc: Name of fwd reads fastq file
    inputBinding:
      position: 2

  reads_2:
    type: File

    doc: Name of rev reads fastq file
    inputBinding:
      position: 3

  assembler:
    type: string?
    doc: Assembler to use {'fermilite','spades','plugin'}. 'fermilite' is default
    inputBinding:
      prefix: --assembler

  spades_mode:
    type: string?
    doc: Mode of Spades {'wgs','sc', 'rna'}. 'wgs' is default
    inputBinding:
      prefix: --spades_mode

  spades_options:
    type: string?
    doc: If set, overrides Spade options generated by the choice of spades_mode
    inputBinding:
      prefix: --spades_options

  plugin_asm_options:
    type: string?
    doc: Base command line of the plugin assembler
    inputBinding:
      prefix: --plugin_asm_options

  nucmer_min_id:
    type: ["null", int]
    default: 90
    doc: Minimum alignment identity (delta-filter -i) [%(default)s]
    inputBinding:
      prefix: --nucmer_min_id

  nucmer_min_len:
    type: ["null", int]
    default: 20
    doc: Minimum alignment length (delta-filter -i) [%(default)s]
    inputBinding:
      prefix: --nucmer_min_len

  nucmer_breaklen:
    type: ["null", int]
    default: 200
    doc: Value to use for -breaklen when running nucmer [%(default)s]
    inputBinding:
      prefix: --nucmer_breaklen

  assembly_cov:
    type: ["null", int]
    default: 50
    doc: Target read coverage when sampling reads for assembly [%(default)s]
    inputBinding:
      prefix: --assembly_cov

  assembly_cov_min:
    type: ["null", int]
    default: 10
    doc: Min estimated read coverage to proceed with assembly for a given cluster
    inputBinding:
      prefix: --assembly_cov_min

  min_scaff_depth:
    type: ["null", int]
    default: 10
    doc: Minimum number of read pairs needed as evidence for scaffold link between two contigs [%(default)s]
    inputBinding:
      prefix: --min_scaff_depth

  threads:
    type: int?
    doc: Experimental. Number of threads. Will run clusters in parallel, but not minimap (yet) [%(default)s]
    inputBinding:
      prefix: --threads
      valueFrom: $(getCores(self,runtime))

  assembled_threshold:
    type: ["null", float]
    default: 0.95
    doc: If proportion of gene assembled (regardless of into how many contigs) is at least this value then the flag gene_assembled is set [%(default)s]
    inputBinding:
      prefix: --assembled_threshold

  gene_nt_extend:
    type: ["null", int]
    default: 30
    doc: Max number of nucleotides to extend ends of gene matches to look for start/stop codons [%(default)s]
    inputBinding:
      prefix: --gene_nt_extend

  unique_threshold:
    type: ["null", float]
    default: 0.03
    doc: If proportion of bases in gene assembled more than once is <= this value, then the flag unique_contig is set [%(default)s]
    inputBinding:
      prefix: --unique_threshold

  force:
    type: ["null", boolean]
    default: false
    doc: Overwrite output directory, if it already exists
    inputBinding:
      prefix: --force

  serial:
    type: boolean?
    default: false
    doc: Serial assembly of reference clusters
    inputBinding:
      prefix: --serial

  verbose:
    type: ["null", boolean]
    default: false
    doc: Be verbose
    inputBinding:
      prefix: --verbose

  SampleID:
    type: string?
    default: UnspecifiedSample
    doc:  Sample ID, will be used to name extra output files
    inputBinding:
      valueFrom: >
        out && python -m MICGENT.post_ariba post-ariba-asm-with-ref
        --ariba-dir out --threads $(getCores(inputs.threads,runtime)) --out-tar "$(self+'.asmqc.tar')"
        --sample-id "$(self)"
      shellQuote: false
      position: 100

  debug:
    type: boolean
    default: false
    doc: Return entire work dir as tarball for debugging the run. Also (always) cleans up.
    inputBinding:
      valueFrom: >
        ${
          var ret = "";
          if(self) {
            ret = " && python -m MICGENT.util dir-to-tar out "+inputs.SampleID+".ariba.debug.tar";
          }
          ret = ret + " && python -m MICGENT.util rmtree --ignore-errors --threads 8 --thread-targets '*/*' out/clusters";
          return ret;
        }
      shellQuote: false
      position: 120

outputs:
  report:
    type: File
    outputBinding:
      glob: out/report.tsv
  assembled_genes:
    type: File
    outputBinding:
      glob: out/assembled_genes.fa.gz
  assembled_seqs:
    type: File
    outputBinding:
      glob: out/assembled_seqs.fa.gz
  assemblies:
    type: File
    outputBinding:
      glob: out/assemblies.fa.gz
  log_clusters:
    type: File?
    outputBinding:
      glob: out/log.clusters.gz
  version_info:
    type: File
    outputBinding:
      glob: out/version_info.txt
  asmqc_tar:
    type: File
    outputBinding:
      glob: $(inputs.SampleID+'.asmqc.tar')
  ariba_debug_tar:
    type: File?
    outputBinding:
      glob: $(inputs.SampleID+'.ariba.debug.tar')
  seq_map:
    type: File
    outputBinding:
      glob: out/seq_map.tsv
  basecov_asm:
    type: File
    outputBinding:
      glob: $(inputs.SampleID+'.basecov_asm.txt')
  basecov_ref:
    type: File
    outputBinding:
      glob: $(inputs.SampleID+'.basecov_ref.txt')
  stdout:
    type: stdout
  stderr:
    type: stderr

stdout: stdout.log
stderr: stderr.log
